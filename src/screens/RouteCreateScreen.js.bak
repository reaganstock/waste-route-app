import React, { useState, useEffect, useRef } from 'react';
import {
  View,
  Text,
  StyleSheet,
  TextInput,
  TouchableOpacity,
  ScrollView,
  Alert,
  ActivityIndicator,
  Platform,
  Image,
  KeyboardAvoidingView,
  Modal,
} from 'react-native';
import { Ionicons } from '@expo/vector-icons';
import DateTimePicker from '@react-native-community/datetimepicker';
import * as DocumentPicker from 'expo-document-picker';
import * as FileSystem from 'expo-file-system';
import * as WebBrowser from 'expo-web-browser';
import * as Location from 'expo-location';
import Map from '../components/Map';
import { supabase } from '../lib/supabase';
import { useRouter, useLocalSearchParams } from 'expo-router';
import Papa from 'papaparse';
import { useAuth } from '../contexts/AuthContext';

const MAPBOX_ACCESS_TOKEN = "pk.eyJ1IjoicmVhZ2Fuc3RvY2siLCJhIjoiY204eHZ1bTQzMDdzOTJrcHRuY2l3em05NiJ9.yMm1TND_J6jZpYJlYmfhyQ";

// Simple coordinate mapping for Wylie, TX and surrounding areas
const CITY_COORDINATES = {
  'dallas': { lat: 32.7767, lng: -96.7970 },
  'plano': { lat: 33.0198, lng: -96.6989 },
  'wylie': { lat: 33.0151, lng: -96.5388 },
  'murphy': { lat: 33.0185, lng: -96.6131 },
  'sachse': { lat: 32.9787, lng: -96.5986 },
};

const parseCSV = (content) => {
  const lines = content.split('\n');
  const headers = lines[0].toLowerCase().split(',');
  
  return lines.slice(1)
    .filter(line => line.trim())
    .map((line) => {
      const values = line.split(',');
      const house = {};
      headers.forEach((header, index) => {
        house[header.trim()] = values[index]?.trim();
      });
      return house;
    })
    .filter(house => house.address && house.lat && house.lng);
};

const geocodeAddress = async (address) => {
  try {
    console.log(`[Mapbox Geocode] Attempting to geocode: "${address}"`);
    
    // Format the address to ensure it's URL-friendly
    const encodedAddress = encodeURIComponent(address);
    const url = `https://api.mapbox.com/geocoding/v5/mapbox.places/${encodedAddress}.json?access_token=${MAPBOX_ACCESS_TOKEN}`;
    
    console.log(`[Mapbox Geocode] Making request to: ${url}`);
    
    const response = await fetch(url);
    const data = await response.json();
    
    console.log(`[Mapbox Geocode] Response status: ${response.status}`);
    
    if (data.features && data.features.length > 0) {
      // Mapbox returns coordinates as [longitude, latitude]
      const [longitude, latitude] = data.features[0].center;
      
      console.log(`[Mapbox Geocode] Success for "${address}". Found at (${latitude}, ${longitude})`);
      
      return {
        lat: latitude.toString(),
        lng: longitude.toString(),
      };
    } else {
      console.warn(`[Mapbox Geocode] Failed for "${address}". No results found in response:`, JSON.stringify(data));
      return null;
    }
  } catch (error) {
    console.error('[Mapbox Geocode] Error:', error);
    return null;
  }
};

const getStatusColor = (status) => {
  switch (status?.toLowerCase()) {
    case 'collect':
      return '#6B7280'; // grey
    case 'skip':
      return '#EF4444'; // red
    case 'new customer':
      return '#10B981'; // green
    case 'error':
      return '#EF4444'; // red for errors
    case 'pending':
    default:
      return '#3B82F6'; // blue
  }
};

const parseAddressList = (text) => {
  // Split by newlines and filter empty lines
  const addresses = text.split('\n')
    .map(line => line.trim())
    .filter(line => line);

  return addresses.map(address => {
    // Split by commas and trim each part
    const parts = address.split(',').map(part => part.trim());
    
    // Revert to expecting at least 4 parts: Street, City, State, Zip
    if (parts.length < 4) { 
      return {
        address,
        isValid: false,
        error: 'Invalid format. Required: Street, City, State, Zip'
      };
    }

    // Revert extraction to separate City, State
    const street = parts[0];
    const city = parts[1];
    const state = parts[2];
    const zip = parts[3];
    // Status is the 5th part (index 4), notes start from 6th (index 5)
    const statusPart = parts.length > 4 ? parts[4] : 'pending';
    const notes = parts.length > 5 ? parts.slice(5).join(', ').trim() : '';

    // Basic validation
    if (!street || street.length < 3) {
      return {
        address,
        isValid: false,
        error: 'Invalid street address'
      };
    }

    if (!city || city.length < 2) { // Revert city check
      return {
        address,
        isValid: false,
        error: 'Invalid City'
      };
    }
    
    // Re-add State check
    if (!state || state.length !== 2) {
      return {
        address,
        isValid: false,
        error: 'State should be 2 letters (e.g., TX)'
      };
    }

    if (!zip || !/^\d{5}(-\d{4})?$/.test(zip)) {
      return {
        address,
        isValid: false,
        error: 'Invalid ZIP code'
      };
    }

    // Process status explicitly
    const status = processHouseStatus(statusPart);
    console.log("Final status for", address, ":", status);

    return {
      address: `${street}, ${city}, ${state} ${zip}`,
      status: status,
      notes: notes,
      isValid: true,
      lat: null,
      lng: null
    };
  });
};

const parseGoogleSheetData = (values) => {
  // Skip header row and filter out empty rows
  return values.slice(1)
    .filter(row => row.length > 0)
    .map(row => ({
      address: row[0] || '',
      lat: row[1] || '',
      lng: row[2] || '',
      notes: row[3] || ''
    }))
    .filter(house => house.address && house.lat && house.lng);
};

const processHouseStatus = (status) => {
  // Convert status to lowercase and trim
  const normalizedStatus = status ? status.toLowerCase().trim() : 'pending';
  
  console.log("Processing status:", status, "->", normalizedStatus);
  
  // Check if it's one of our valid statuses
  if (['skip', 'collect', 'new customer', 'pending'].includes(normalizedStatus)) {
    return normalizedStatus;
  }
  
  // Handle legacy or incorrect statuses
  switch (normalizedStatus) {
    case 'new':
      return 'new customer';
    case 'completed':
      return 'collect';
    case 'skipped':
      return 'skip';
    default:
      return 'pending';
  }
};

const RouteCreateScreen = React.forwardRef(({ isEditing = false, existingRoute = null, hideHeader = false, onRouteChange }, ref) => {
  const router = useRouter();
  const { user } = useAuth();
  const { driver_id } = useLocalSearchParams();
  const [name, setName] = useState(existingRoute?.name || '');
  const [date, setDate] = useState(existingRoute?.date ? new Date(existingRoute.date) : new Date());
  const [showDatePicker, setShowDatePicker] = useState(false);
  const [drivers, setDrivers] = useState([]);
  const [selectedDriver, setSelectedDriver] = useState(driver_id || existingRoute?.driver_id || user?.id);
  const [uploading, setUploading] = useState(false);
  const [houses, setHouses] = useState(existingRoute?.houses || []);
  const [addressInput, setAddressInput] = useState('');
  const [isLoadingGoogleSheet, setIsLoadingGoogleSheet] = useState(false);
  const isAdmin = user?.user_metadata?.role === 'admin';
  const [notes, setNotes] = useState(existingRoute?.notes || '');
  const [showInfoModal, setShowInfoModal] = useState(false);

  useEffect(() => {
    fetchDrivers();
    // Check if this is the first time opening the screen
    checkFirstTimeUser();
  }, []);

  const checkFirstTimeUser = async () => {
    try {
      const firstTimeKey = 'hasSeenRouteCreateInfo';
      const { data, error } = await supabase
        .from('user_preferences')
        .select('value')
        .eq('user_id', user?.id)
        .eq('key', firstTimeKey)
        .single();

      if (error || !data) {
        // Show the info modal for first-time users
        setShowInfoModal(true);
        // Save that user has seen the info
        await supabase
          .from('user_preferences')
          .upsert({
            user_id: user?.id,
            key: firstTimeKey,
            value: 'true'
          });
      }
    } catch (error) {
      console.error('Error checking first-time user:', error);
      // Show modal anyway if we can't verify
      setShowInfoModal(true);
    }
  };

  useEffect(() => {
    if (driver_id) {
      setSelectedDriver(driver_id);
    }
  }, [driver_id]);

  const fetchDrivers = async () => {
    try {
      // If user is a driver, set themselves as the driver
      if (user?.user_metadata?.role === 'driver') {
        setDrivers([{
          id: user.id,
          full_name: user.user_metadata?.full_name || user.email,
          role: 'driver'
        }]);
        setSelectedDriver(user.id);
        return;
      }

      // For admins, fetch all active drivers including themselves
      const { data, error } = await supabase
        .from('profiles')
        .select('id, full_name, role, avatar_url')
        .in('role', ['driver', 'admin'])
        .eq('status', 'active');

      if (error) throw error;
      setDrivers(data || []);
      
      // If editing, keep the selected driver
      if (existingRoute?.driver_id) {
        setSelectedDriver(existingRoute.driver_id);
      }
    } catch (error) {
      console.error('Error fetching drivers:', error);
      Alert.alert('Error', 'Failed to load drivers');
    }
  };

  const handleAddressPaste = async () => {
    if (!addressInput.trim()) {
      Alert.alert('Error', 'Please enter at least one address');
      return;
    }

    try {
      setUploading(true);
      const newHousesInput = parseAddressList(addressInput);
      const successfullyGeocodedHouses = [];
      const failedAddresses = [];

      // Geocode each address using Mapbox
      for (const houseInput of newHousesInput) {
        if (!houseInput.isValid) {
          console.warn(`Skipping invalid address format: ${houseInput.address} (${houseInput.error})`);
          failedAddresses.push(`${houseInput.address} - ${houseInput.error}`);
          continue; // Skip invalidly formatted addresses
        }
        
        console.log(`Processing address: ${houseInput.address}`);
        
        // Add a slight delay between geocoding requests to avoid rate limits
        if (successfullyGeocodedHouses.length > 0) {
          await new Promise(resolve => setTimeout(resolve, 300));
        }
        
        const coords = await geocodeAddress(houseInput.address);
        
        if (coords && coords.lat && coords.lng) {
          successfullyGeocodedHouses.push({
            ...houseInput,
            lat: coords.lat,
            lng: coords.lng,
          });
          console.log(`Successfully geocoded: ${houseInput.address} to ${coords.lat},${coords.lng}`);
        } else {
          console.warn(`Failed to geocode: ${houseInput.address}`);
          failedAddresses.push(houseInput.address);
        }
      }

      if (successfullyGeocodedHouses.length > 0) {
        setHouses(prevHouses => [...prevHouses, ...successfullyGeocodedHouses]);
        console.log(`Added ${successfullyGeocodedHouses.length} houses to the list`);
      }
      
      setAddressInput(''); // Clear input after adding

      if (failedAddresses.length > 0) {
        const message = failedAddresses.length === 1 
          ? `Failed to geocode: ${failedAddresses[0]}`
          : `Failed to geocode ${failedAddresses.length} addresses. The first failure was: ${failedAddresses[0]}`;
        
        Alert.alert('Geocoding Issues', message, [
          { text: 'OK' },
          { 
            text: 'Show All Failures', 
            onPress: () => Alert.alert('Failed Addresses', failedAddresses.join('\n\n'))
          }
        ]);
      }

    } catch (error) {
      console.error('Error processing addresses:', error);
      Alert.alert('Error', `Failed to process addresses: ${error.message}`);
    } finally {
      setUploading(false);
    }
  };

  const handleUploadCSV = async () => {
    try {
      setUploading(true);
      const result = await DocumentPicker.getDocumentAsync({
        type: 'text/csv',
      });

      if (result.type === 'success') {
        const fileContent = await FileSystem.readAsStringAsync(result.uri);
        const parsedHouses = parseCSV(fileContent);
        setHouses(prevHouses => [...prevHouses, ...parsedHouses]);
      }
    } catch (error) {
      Alert.alert('Error', 'Failed to upload CSV file');
    } finally {
      setUploading(false);
    }
  };

  const handleGoogleSheetImport = async () => {
    try {
      setIsLoadingGoogleSheet(true);
      
      // Construct Google OAuth2 URL
      const scope = encodeURIComponent('https://www.googleapis.com/auth/spreadsheets.readonly');
      const authUrl = `https://accounts.google.com/o/oauth2/v2/auth?client_id=${GOOGLE_CLIENT_ID}&redirect_uri=${GOOGLE_REDIRECT_URI}&response_type=token&scope=${scope}`;
      
      // Open web browser for authentication
      const result = await WebBrowser.openAuthSessionAsync(authUrl, GOOGLE_REDIRECT_URI);
      
      if (result.type === 'success') {
        // Extract access token from URL
        const accessToken = result.url.match(/access_token=([^&]*)/)[1];
        
        // Show sheet picker (you'll need to implement this UI)
        const sheetId = await new Promise((resolve) => {
          Alert.prompt(
            'Enter Sheet ID',
            'Please enter the Google Sheet ID',
            [
              {
                text: 'Cancel',
                onPress: () => resolve(null),
                style: 'cancel',
              },
              {
                text: 'OK',
                onPress: (sheetId) => resolve(sheetId),
              },
            ],
            'plain-text'
          );
        });

        if (!sheetId) return;

        // Fetch sheet data
        const response = await fetch(
          `https://sheets.googleapis.com/v4/spreadsheets/${sheetId}/values/A:D`,
          {
            headers: {
              Authorization: `Bearer ${accessToken}`,
            },
          }
        );

        const data = await response.json();
        
        if (data.values) {
          const parsedHouses = parseGoogleSheetData(data.values);
          setHouses(prevHouses => [...prevHouses, ...parsedHouses]);
        }
      }
    } catch (error) {
      Alert.alert('Error', 'Failed to import from Google Sheets');
      console.error(error);
    } finally {
      setIsLoadingGoogleSheet(false);
    }
  };

  const removeHouse = (index) => {
    setHouses(prevHouses => prevHouses.filter((_, i) => i !== index));
  };

  const handleCreateRoute = async () => {
    // Basic validation
    if (!name.trim()) {
      Alert.alert('Error', 'Please enter a route name.');
      return;
    }
    if (!selectedDriver) {
      Alert.alert('Error', 'Please select a driver.');
      return;
    }
    if (houses.length === 0) {
      Alert.alert('Error', 'Please add at least one house to the route.');
      return;
    }

    // Get team_id from the logged-in user context
    // *** Adjust this based on how team_id is actually stored in your AuthContext user object ***
    const teamId = user?.team_id; 

    if (!teamId) {
       Alert.alert('Error', 'Could not determine your team. Please ensure you are assigned to a team.');
       console.error('User object missing team_id:', user);
       return; // Stop if team_id is missing
    }

    try {
      setUploading(true);

      // Create route first
      console.log('Creating route with data:', {
         name: name.trim(),
         date: date.toISOString().split('T')[0], // Send only date part if column is DATE
         driver_id: selectedDriver,
         status: 'pending',
         // start_time: new Date().toISOString(), // Commented out - set when route starts
         total_houses: houses.length,
         completed_houses: 0,
         team_id: teamId, // Include team_id
         notes: notes.trim() // Include notes
      });
      const { data: route, error: routeError } = await supabase
        .from('routes')
        .insert({
          name: name.trim(),
          date: date.toISOString().split('T')[0], // Send only date part if your DB column is DATE, otherwise use .toISOString()
          driver_id: selectedDriver,
          status: 'pending',
          // start_time: new Date().toISOString(), // Set start_time when route actually begins
          total_houses: houses.length,
          completed_houses: 0,
          team_id: teamId, // Include team_id
          notes: notes.trim() // Include notes
        })
        .select('id') // Only select ID, other fields might not be immediately updated by triggers
        .single();

      if (routeError) {
          console.error('Supabase route insert error:', routeError);
          throw new Error(`Database error creating route: ${routeError.message}`); // Throw a more specific error
      }
      
      if (!route || !route.id) {
          throw new Error('Failed to get route ID after insert.');
      }

      console.log('Route created with ID:', route.id);

      // Process houses data
      const housesData = houses.map((house, index) => ({
        route_id: route.id,
        address: house.address,
        status: processHouseStatus(house.status),
        notes: house.notes,
        is_new_customer: house.status === 'new customer' || house.status === 'new',
        lat: house.lat,
        lng: house.lng
      }));
      
      console.log(`Attempting to insert ${housesData.length} houses for route ${route.id}`);

      // Insert houses
      const { error: housesError } = await supabase
        .from('houses')
        .insert(housesData);

      if (housesError) {
          console.error('Supabase houses insert error:', housesError);
          // Consider trying to delete the route if houses fail? Or notify user?
          throw new Error(`Database error adding houses: ${housesError.message}`); // Throw a more specific error
      }

      console.log('Houses inserted successfully');
      Alert.alert('Success', 'Route created successfully');
      router.replace('/(tabs)'); // Use replace to prevent going back to create screen 
    } catch (error) {
      // Log the full error object
      console.error('Error in handleCreateRoute:', error);
      // Display a more informative error message
      const errorMessage = error instanceof Error ? error.message : 'An unknown error occurred while creating the route.';
      Alert.alert('Error Creating Route', errorMessage);
    } finally {
      setUploading(false);
    }
  };

  // Expose route data to parent
  React.useImperativeHandle(ref, () => ({
    getRouteData: () => {
      if (!name || !selectedDriver || houses.length === 0) {
        return null;
      }

      return {
        name,
        date,
        driver_id: selectedDriver,
        houses: houses.map(house => ({
          address: house.address,
          lat: house.lat,
          lng: house.lng,
          status: house.status || 'pending',
          notes: house.notes || '',
          is_new_customer: house.status === 'new customer' || false,
          estimated_time: house.estimated_time || 5.00,
          priority: house.priority || 0
        })),
        notes: notes || ''
      };
    }
  }));

  // Notify parent of changes
  React.useEffect(() => {
    if (onRouteChange) {
      const hasChanges = 
        name !== (existingRoute?.name || '') ||
        selectedDriver !== (existingRoute?.driver_id || '') ||
        houses.length !== (existingRoute?.total_houses || 0) ||
        notes !== (existingRoute?.notes || '');
      
      if (hasChanges) {
        onRouteChange();
      }
    }
  }, [name, selectedDriver, houses, notes, existingRoute, onRouteChange]);

  return (
    <KeyboardAvoidingView 
      style={styles.kavContainer}
      behavior={Platform.OS === "ios" ? "padding" : "height"}
      keyboardVerticalOffset={Platform.OS === 'ios' ? 60 : 0}
    >
      <View style={styles.container}>
        {!hideHeader && (
          <View style={styles.header}>
            <TouchableOpacity 
              onPress={() => router.back()} 
              style={styles.backButton}
            >
              <Ionicons name="arrow-back" size={24} color="#fff" />
              <Text style={styles.backButtonText}>Back</Text>
            </TouchableOpacity>
            <Text style={styles.headerTitle}>
              {isEditing ? 'Edit Route' : 'Create Route'}
            </Text>
            <TouchableOpacity 
              style={[
                styles.headerCreateButton, 
                (!name || !selectedDriver || houses.length === 0) && styles.createButtonDisabled
              ]}
              onPress={handleCreateRoute}
              disabled={!name || !selectedDriver || houses.length === 0 || uploading}
            >
              {uploading ? (
                <ActivityIndicator color="#fff" size="small" />
              ) : (
                <Text style={styles.headerCreateText}>
                  {isEditing ? 'Save' : 'Create'}
                </Text>
              )}
            </TouchableOpacity>
          </View>
        )}

        <ScrollView 
          style={styles.scrollView}
          contentContainerStyle={styles.scrollContentContainer}
          keyboardShouldPersistTaps="handled"
          showsVerticalScrollIndicator={false}
        >
          <View style={styles.card}>
            <Text style={styles.cardTitle}>Route Details</Text>

            <View style={styles.inputContainer}>
              <Ionicons name="map-outline" size={22} color="#3B82F6" />
              <TextInput
                style={styles.input}
                placeholder="Route Name"
                placeholderTextColor="#6B7280"
                value={name}
                onChangeText={setName}
              />
            </View>

            <TouchableOpacity 
              style={styles.inputContainer}
              onPress={() => setShowDatePicker(true)}
            >
              <Ionicons name="calendar-outline" size={22} color="#3B82F6" />
              <Text style={styles.dateText}>
                {date.toLocaleDateString()}
              </Text>
            </TouchableOpacity>

            {showDatePicker && (
              <DateTimePicker
                value={date}
                mode="date"
                display="default"
                onChange={(event, selectedDate) => {
                  setShowDatePicker(false);
                  if (selectedDate) {
                    setDate(selectedDate);
                  }
                }}
              />
            )}
          </View>
          
          {isAdmin && (
            <View style={styles.card}>
              <Text style={styles.cardTitle}>Assign Driver</Text>
              <ScrollView 
                horizontal 
                showsHorizontalScrollIndicator={false}
                style={styles.driverList}
              >
                {drivers.map(driver => (
                  <TouchableOpacity
                    key={driver.id}
                    style={[
                      styles.driverCard,
                      selectedDriver === driver.id && styles.driverCardSelected
                    ]}
                    onPress={() => setSelectedDriver(driver.id)}
                  >
                    {driver.avatar_url ? (
                      <Image
                        source={{ uri: driver.avatar_url }}
                        style={styles.driverAvatar}
                      />
                    ) : (
                      <View style={styles.driverAvatar}>
                        <Text style={styles.driverInitials}>
                          {driver.full_name.split(' ').map(n => n[0]).join('')}
                        </Text>
                      </View>
                    )}
                    <Text style={styles.driverName}>{driver.full_name}</Text>
                  </TouchableOpacity>
                ))}
              </ScrollView>
            </View>
          )}

          <View style={styles.card}>
            <Text style={styles.cardTitle}>Route Notes</Text>
            <TextInput
              style={styles.notesInput}
              placeholder="Enter notes about this route here"
              placeholderTextColor="#6B7280"
              value={notes}
              onChangeText={setNotes}
              multiline
              numberOfLines={4}
              textAlignVertical="top"
            />
          </View>

          <View style={styles.card}>
            <Text style={styles.cardTitle}>Add Addresses</Text>
            
            <View style={styles.buttonRow}>
              <TouchableOpacity 
                style={styles.importButton}
                onPress={handleGoogleSheetImport}
                disabled={isLoadingGoogleSheet}
              >
                {isLoadingGoogleSheet ? (
                  <ActivityIndicator color="#fff" size="small" />
                ) : (
                  <>
                    <Ionicons name="logo-google" size={20} color="#fff" />
                    <Text style={styles.importButtonText}>Google Sheet</Text>
                  </>
                )}
              </TouchableOpacity>
              <TouchableOpacity 
                style={styles.importButton}
                onPress={handleUploadCSV}
                disabled={uploading}
              >
                {uploading ? (
                  <ActivityIndicator color="#fff" size="small" />
                ) : (
                  <>
                    <Ionicons name="document-text-outline" size={20} color="#fff" />
                    <Text style={styles.importButtonText}>Upload CSV</Text>
                  </>
                )}
              </TouchableOpacity>
            </View>

            <View style={styles.addressInputWrapper}>
              <Text style={styles.inputLabel}>Enter addresses below (one per line)</Text>
              <TextInput
                style={styles.addressInput}
                placeholder="123 Main St, Dallas, TX, 75201 [, status] [, notes]"
                placeholderTextColor="#6B7280"
                value={addressInput}
                onChangeText={setAddressInput}
                multiline
                numberOfLines={6}
                textAlignVertical="top"
                autoCapitalize="none"
              />
              <TouchableOpacity
                style={[
                  styles.addButton,
                  !addressInput.trim() && styles.addButtonDisabled
                ]}
                onPress={handleAddressPaste}
                disabled={!addressInput.trim() || uploading}
              >
                {uploading ? (
                  <ActivityIndicator color="#fff" size="small" />
                ) : (
                  <>
                    <Ionicons name="add-circle-outline" size={20} color="#fff" />
                    <Text style={styles.addButtonText}>Add Addresses</Text>
                  </>
                )}
              </TouchableOpacity>
              <Text style={styles.helperText}>
                Format: Street, City, State, ZIP [, Status] [, Notes]{'\n'}
                Status can be: collect, skip, or new customer
              </Text>
            </View>

            {houses.length > 0 && (
              <>
                <Text style={[styles.cardTitle, {marginTop: 24}]}>Route Preview</Text>
                <View style={styles.mapContainer}>
                  <Map 
                    houses={houses}
                    onHousePress={(house) => {
                      Alert.alert(
                        house.address,
                        house.notes || 'No additional notes',
                        [{ text: 'OK' }]
                      );
                    }}
                    style={styles.map}
                  />
                </View>
              </>
            )}

            {houses.length > 0 && (
              <View style={styles.houseListContainer}>
                <Text style={styles.listTitle}>Added Addresses ({houses.length})</Text>
                {houses.map((house, index) => (
                  <View key={`house-${index}`} style={styles.houseItem}>
                    <View style={styles.houseItemContent}>
                      <Text style={styles.houseAddress}>{house.address}</Text>
                      {house.notes && (
                        <Text style={styles.houseNotes}>{house.notes}</Text>
                      )}
                      <View style={[styles.statusBadge, { backgroundColor: getStatusColor(house.status) + '20' }]}>
                        <View style={[styles.statusDot, { backgroundColor: getStatusColor(house.status) }]} />
                        <Text style={[styles.statusText, { color: getStatusColor(house.status) }]}>
                          {house.status?.charAt(0).toUpperCase() + house.status?.slice(1)}
                        </Text>
                      </View>
                    </View>
                    <TouchableOpacity 
                      style={styles.removeButton}
                      onPress={() => removeHouse(index)}
                    >
                      <Ionicons name="close-circle" size={20} color="#EF4444" />
                    </TouchableOpacity>
                  </View>
                ))}
              </View>
            )}
          </View>
        </ScrollView>
      </View>

      <Modal
        visible={showInfoModal}
        transparent={true}
        animationType="fade"
        onRequestClose={() => setShowInfoModal(false)}
      >
        <KeyboardAvoidingView 
          behavior={Platform.OS === "ios" ? "padding" : "height"}
          style={{flex: 1}}
        >
          <View style={styles.modalOverlay}>
            <View style={styles.modalContent}>
              <View style={styles.modalHeader}>
                <Text style={styles.modalTitle}>How to Create a Route</Text>
                <TouchableOpacity 
                  onPress={() => setShowInfoModal(false)}
                  style={styles.modalCloseButton}
                >
                  <Ionicons name="close" size={24} color="#fff" />
                </TouchableOpacity>
              </View>

              <ScrollView style={styles.modalBody}>
                <Text style={styles.modalSubtitle}>Address Format</Text>
                <Text style={styles.modalText}>
                  Enter addresses in the following format:
                </Text>
                <Text style={styles.codeExample}>
                  123 Main Street, Dallas TX, 75201, skip/collect/new customer, notes
                </Text>
                
                <Text style={styles.modalSubtitle}>Status Options:</Text>
                <View style={styles.statusItem}>
                  <View style={[styles.statusDot, { backgroundColor: '#6B7280' }]} />
                  <Text style={styles.statusItemText}>collect - Regular collection (default)</Text>
                </View>
                <View style={styles.statusItem}>
                  <View style={[styles.statusDot, { backgroundColor: '#EF4444' }]} />
                  <Text style={styles.statusItemText}>skip - Skip this house</Text>
                </View>
                <View style={styles.statusItem}>
                  <View style={[styles.statusDot, { backgroundColor: '#10B981' }]} />
                  <Text style={styles.statusItemText}>new customer - New customer</Text>
                </View>

                <Text style={styles.modalSubtitle}>Tips:</Text>
                <Text style={styles.tipText}>• You can add multiple addresses by entering one per line</Text>
                <Text style={styles.tipText}>• Status and notes are optional</Text>
                <Text style={styles.tipText}>• You'll receive notifications when approaching houses</Text>
                <Text style={styles.tipText}>• Special notifications appear for skipped houses or new customers</Text>
              </ScrollView>

              <TouchableOpacity 
                style={styles.modalButton}
                onPress={() => setShowInfoModal(false)}
              >
                <Text style={styles.modalButtonText}>Got It</Text>
              </TouchableOpacity>
            </View>
          </View>
        </KeyboardAvoidingView>
      </Modal>
    </KeyboardAvoidingView>
  );
});

export default RouteCreateScreen;

const styles = StyleSheet.create({
  kavContainer: {
    flex: 1,
  },
  container: {
    flex: 1,
  },
  scrollView: {
    flex: 1,
  },
  scrollContentContainer: {
    padding: 16,
  },
  header: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    padding: 16,
    paddingTop: Platform.OS === 'ios' ? 60 : 20,
    backgroundColor: '#1F2937',
    borderBottomWidth: 1,
    borderBottomColor: 'rgba(255,255,255,0.1)',
  },
  headerTitle: {
    fontSize: 20,
    fontWeight: '600',
    color: '#fff',
    flex: 1,
    textAlign: 'center',
  },
  backButton: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 8,
    paddingVertical: 8,
    paddingHorizontal: 8,
  },
  backButtonText: {
    color: '#fff',
    fontSize: 16,
    fontWeight: '500',
  },
  placeholder: {
    width: 44, // Same width as back button for alignment
  },
  card: {
    backgroundColor: '#1F2937',
    borderRadius: 16,
    padding: 20,
    marginBottom: 16,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
  },
  cardTitle: {
    fontSize: 18,
    fontWeight: '600',
    color: '#fff',
    marginBottom: 16,
  },
  inputContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#2D3748',
    borderRadius: 12,
    padding: 14,
    marginBottom: 16,
  },
  input: {
    flex: 1,
    marginLeft: 12,
    color: '#fff',
    fontSize: 16,
  },
  dateText: {
    color: '#fff',
    fontSize: 16,
    marginLeft: 12,
  },
  driverList: {
    flexDirection: 'row',
    marginTop: 8,
  },
  driverCard: {
    alignItems: 'center',
    marginRight: 16,
    padding: 12,
    backgroundColor: '#2D3748',
    borderRadius: 12,
    borderWidth: 2,
    borderColor: 'transparent',
    width: 100,
  },
  driverCardSelected: {
    borderColor: '#3B82F6',
    backgroundColor: '#2C5282',
  },
  driverAvatar: {
    width: 56,
    height: 56,
    borderRadius: 28,
    backgroundColor: '#3B82F6',
    alignItems: 'center',
    justifyContent: 'center',
    marginBottom: 8,
  },
  driverInitials: {
    color: '#fff',
    fontSize: 20,
    fontWeight: '600',
  },
  driverName: {
    color: '#fff',
    fontSize: 14,
    textAlign: 'center',
  },
  notesInput: {
    backgroundColor: '#2D3748',
    borderRadius: 12,
    padding: 16,
    color: '#fff',
    fontSize: 16,
    minHeight: 120,
    textAlignVertical: 'top',
  },
  buttonRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginBottom: 16,
  },
  importButton: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    gap: 8,
    padding: 14,
    backgroundColor: '#2563EB',
    borderRadius: 12,
    flex: 1,
    marginHorizontal: 4,
  },
  importButtonText: {
    color: '#fff',
    fontWeight: '600',
    fontSize: 15,
  },
  addressInputWrapper: {
    marginTop: 8,
  },
  inputLabel: {
    color: '#D1D5DB',
    fontSize: 14,
    marginBottom: 8,
  },
  addressInput: {
    backgroundColor: '#2D3748',
    borderRadius: 12,
    padding: 16,
    color: '#fff',
    fontSize: 15,
    minHeight: 140,
    textAlignVertical: 'top',
    fontFamily: Platform.OS === 'ios' ? 'Menlo' : 'monospace',
  },
  addButton: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    gap: 8,
    backgroundColor: '#10B981',
    borderRadius: 12,
    padding: 14,
    marginTop: 12,
  },
  addButtonDisabled: {
    backgroundColor: '#4B5563',
  },
  addButtonText: {
    color: '#fff',
    fontSize: 16,
    fontWeight: '600',
  },
  helperText: {
    color: '#9CA3AF',
    fontSize: 12,
    marginTop: 8,
    fontStyle: 'italic',
  },
  mapContainer: {
    height: 200,
    borderRadius: 12,
    overflow: 'hidden',
    marginTop: 8,
  },
  map: {
    flex: 1,
  },
  houseListContainer: {
    marginTop: 24,
  },
  listTitle: {
    fontSize: 16,
    fontWeight: '600',
    color: '#E5E7EB',
    marginBottom: 12,
  },
  houseItem: {
    backgroundColor: '#2D3748',
    borderRadius: 12,
    padding: 16,
    marginBottom: 12,
    flexDirection: 'row',
    alignItems: 'flex-start',
    borderLeftWidth: 3,
    borderLeftColor: '#3B82F6',
  },
  houseItemContent: {
    flex: 1,
  },
  houseAddress: {
    color: '#fff',
    fontSize: 16,
    marginBottom: 4,
  },
  houseNotes: {
    color: '#9CA3AF',
    fontSize: 14,
    marginBottom: 8,
    fontStyle: 'italic',
  },
  statusBadge: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingHorizontal: 8,
    paddingVertical: 4,
    borderRadius: 12,
    alignSelf: 'flex-start',
  },
  statusDot: {
    width: 8,
    height: 8,
    borderRadius: 4,
    marginRight: 6,
  },
  statusText: {
    fontSize: 12,
    fontWeight: '500',
  },
  removeButton: {
    marginLeft: 12,
    padding: 4,
  },
  footer: {
    padding: 16,
    backgroundColor: 'rgba(17, 24, 39, 0.95)',
    borderTopWidth: 1,
    borderTopColor: 'rgba(255,255,255,0.1)',
  },
  createButton: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    gap: 10,
    backgroundColor: '#3B82F6',
    borderRadius: 12,
    padding: 16,
  },
  createButtonDisabled: {
    backgroundColor: '#4B5563',
  },
  createButtonText: {
    color: '#fff',
    fontSize: 18,
    fontWeight: '600',
  },
  modalOverlay: {
    flex: 1,
    backgroundColor: 'rgba(0, 0, 0, 0.7)',
    justifyContent: 'center',
    alignItems: 'center',
    padding: 20,
  },
  modalContent: {
    backgroundColor: '#1F2937',
    borderRadius: 16,
    width: '100%',
    maxHeight: '80%',
    padding: 0,
    overflow: 'hidden',
  },
  modalHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    borderBottomWidth: 1,
    borderBottomColor: 'rgba(255, 255, 255, 0.1)',
    padding: 16,
  },
  modalTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#fff',
  },
  modalCloseButton: {
    padding: 4,
  },
  modalBody: {
    padding: 16,
    maxHeight: 400,
  },
  modalSubtitle: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#fff',
    marginTop: 16,
    marginBottom: 8,
  },
  modalText: {
    fontSize: 14,
    color: '#D1D5DB',
    marginBottom: 8,
  },
  codeExample: {
    fontFamily: Platform.OS === 'ios' ? 'Menlo' : 'monospace',
    fontSize: 12,
    color: '#D1D5DB',
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
    padding: 12,
    borderRadius: 8,
    marginVertical: 8,
  },
  statusItem: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 8,
  },
  statusItemText: {
    fontSize: 14,
    color: '#D1D5DB',
  },
  tipText: {
    fontSize: 14,
    color: '#D1D5DB',
    marginBottom: 6,
  },
  modalButton: {
    backgroundColor: '#3B82F6',
    padding: 16,
    borderRadius: 8,
    alignItems: 'center',
    margin: 16,
  },
  modalButtonText: {
    color: '#fff',
    fontSize: 16,
    fontWeight: 'bold',
  },
  headerCreateButton: {
    paddingHorizontal: 16,
    paddingVertical: 8,
    backgroundColor: '#3B82F6',
    borderRadius: 8,
  },
  headerCreateText: {
    color: '#fff',
    fontWeight: '600',
    fontSize: 15,
  },
}); 